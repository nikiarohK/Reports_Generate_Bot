import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from datetime import datetime, timedelta
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandObject

from database import init_db, add_sale, get_sales_by_date, delete_sale, update_sale, get_sale_by_id, sum_sales_for_period
import re
from config import BOT_TOKEN
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_date = State()
    waiting_for_record_selection = State()
    waiting_for_edit_choice = State()
    waiting_for_edit_amount = State()
    waiting_for_edit_time = State()
    waiting_for_edit_sales = State()
    waiting_for_edit_purchases = State()
    waiting_for_edit_admin = State()
    waiting_for_edit_card = State()
    waiting_for_edit_user_tag = State()
    waiting_for_delete_confirmation = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–∞–ª–µ–Ω–¥–∞—Ä—è
def create_calendar(year=None, month=None, selected_date=None):
    if year is None or month is None:
        today = datetime.now()
        year, month = today.year, today.month

    keyboard = InlineKeyboardBuilder()

    month_name = datetime(year, month, 1).strftime('%B %Y')
    keyboard.row(InlineKeyboardButton(text=month_name, callback_data="ignore"))

    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.row(*[InlineKeyboardButton(text=day, callback_data="ignore") for day in week_days])

    first_day = datetime(year, month, 1)
    last_day = (datetime(year, month + 1, 1) - timedelta(days=1)) if month < 12 else (datetime(year + 1, 1, 1) - timedelta(days=1))

    buttons = []

    for _ in range((first_day.weekday() + 1) % 7):
        buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    for day in range(1, last_day.day + 1):
        date_obj = datetime(year, month, day).date()
        date_str = date_obj.strftime('%Y-%m-%d')

        text = f"{day}"
        if selected_date and date_obj == selected_date:
            text = f"‚úÖ {day}"

        buttons.append(InlineKeyboardButton(text=text, callback_data=f"calendar_day_{date_str}"))

    while len(buttons) % 7 != 0:
        buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    for i in range(0, len(buttons), 7):
        keyboard.row(*buttons[i:i+7])

    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1

    keyboard.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"calendar_prev_{prev_year}_{prev_month}"),
        InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="calendar_today"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"calendar_next_{next_year}_{next_month}")
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∑–∞ –º–µ—Å—è—Ü
    keyboard.row(
        InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü", callback_data=f"month_report:{year}:{month}"),
        InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="reload")
    )
    
    keyboard.row(
        InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    )

    return keyboard.as_markup()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∑–∞ –º–µ—Å—è—Ü
@dp.callback_query(lambda c: c.data.startswith('month_report:'))
async def handle_month_report(callback_query: types.CallbackQuery):
    _, year, month = callback_query.data.split(':')
    year, month = int(year), int(month)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –º–µ—Å—è—Ü
    start_date = datetime(year, month, 1).strftime('%d.%m.%y')
    end_date = (datetime(year, month + 1, 1) - timedelta(days=1)).strftime('%d.%m.%y') if month < 12 else (datetime(year + 1, 1, 1) - timedelta(days=1)).strftime('%d.%m.%y')
    
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü –∏–∑ –≤–∞—à–µ–π –ë–î
    # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
    monthly_sales = sum_sales_for_period(start_date, end_date, '–ø—Ä–æ–¥–∞–∂–∞')
    monthly_purchases = sum_sales_for_period(start_date, end_date, '–∑–∞–∫—É–ø–∫–∞')
    
    admin_percent = round(monthly_sales * 0.15)
    card_fee = 100 * (datetime(year, month + 1, 1) - datetime(year, month, 1)).days if month < 12 else (datetime(year + 1, 1, 1) - datetime(year, month, 1)).days
    month_total = int(monthly_sales - monthly_purchases - admin_percent - card_fee)
    
    month_name = datetime(year, month, 1).strftime('%B %Y')
    report = (
        f"<b>–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∑–∞ {month_name}</b>\n\n"
        f"–ü—Ä–æ–¥–∞–∂–∏: {int(monthly_sales)}—Ä\n"
        f"–ó–∞–∫—É–ø–∫–∏: {int(monthly_purchases)}—Ä\n"
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –∞–¥–º–∏–Ω–∞: {admin_percent}—Ä\n"
        f"–ö–æ–º–∏—Å—Å–∏—è –∫–∞—Ä—Ç—ã: {card_fee}—Ä\n\n"
        f"<b>–ò–¢–û–ì–û: {month_total}—Ä</b>"
    )
    
    await callback_query.message.answer(report)
    await callback_query.answer()


@dp.inline_query()
async def handle_inline_sales(query: types.InlineQuery):
    # –°—Ç—Ä–æ–≥–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    pattern = r"#?(–ø—Ä–æ–¥–∞–∂–∞|–∑–∞–∫—É–ø–∫–∞)/(\d{2}\.\d{2}\.\d{2})/(@\w+)/(\d{2}:\d{2})/([\d,.]+)(—Ä)?$"
    match = re.fullmatch(pattern, query.query.strip())
    
    if not match:
        await query.answer(
            results=[],
            switch_pm_text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: #–ø—Ä–æ–¥–∞–∂–∞/10.04.25/@username/10:00/7000—Ä",
            switch_pm_parameter="help"
        )
        return

    sale_type, date, user_tag, time, amount, _ = match.groups()
    amount = amount.replace(',', '').replace('.', '').strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    existing = get_sales_by_date(date, sale_type)
    duplicate = any(
        sale[2] == user_tag and sale[3] == time and sale[4] == amount
        for sale in existing
    )
    
    if duplicate:
        result = types.InlineQueryResultArticle(
            id="1",
            title="–¢–∞–∫–∞—è –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            input_message_content=types.InputTextMessageContent(
                message_text="–≠—Ç–∞ –∑–∞–ø–∏—Å—å —É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ",
                parse_mode=ParseMode.HTML
            )
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ",
                        callback_data=f"confirm_add:{sale_type}:{date}:{user_tag}:{time}:{amount}"
                    )
                ]
            ]
        )
        
        result = types.InlineQueryResultArticle(
            id="1",
            title=f"{sale_type.capitalize()}: {amount}—Ä",
            input_message_content=types.InputTextMessageContent(
                message_text=(
                    f"<b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b>\n"
                    f"–¢–∏–ø: {sale_type}\n"
                    f"–î–∞—Ç–∞: {date}\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_tag}\n"
                    f"–í—Ä–µ–º—è: {time}\n"
                    f"–°—É–º–º–∞: {amount}—Ä\n"
                    f"–î–æ–±–∞–≤–∏–ª: {query.from_user.full_name}"
                ),
                parse_mode=ParseMode.HTML
            ),
            description=f"{sale_type} {date} {user_tag} {time}",
            reply_markup=keyboard
        )

    await query.answer(results=[result], cache_time=0)

@dp.callback_query(lambda c: c.data.startswith('confirm_add:'))
async def process_confirmation(callback_query: types.CallbackQuery):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback, –Ω–æ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        parts = callback_query.data.split(':')
        if len(parts) < 6:
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        _, sale_type, date, user_tag, time, amount = parts[:6]
        


        add_sale(
            sale_type=sale_type,
            date=date,
            user_tag=user_tag,
            time=time,
            amount=amount,
            user_id=callback_query.from_user.id
        )
        await callback_query.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", show_alert=True)
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        await callback_query.message.edit_reply_markup(reply_markup=None)
        
    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        print(f"Error in process_confirmation: {e}")

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∞", callback_data="sales"),
        InlineKeyboardButton(text="–ó–∞–∫—É–ø–∫–∞", callback_data="purchase")
    )
    builder.row(InlineKeyboardButton(text="–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å", callback_data="report"))

    try:
        photo_path = Path("hello_photo.jpg").absolute()
        await message.reply_photo(
            photo=types.FSInputFile(photo_path),
            caption="–í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ –º–æ–∂–Ω–æ –≥–ª—è–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µüëá",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç!\n\n–í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ –º–æ–∂–Ω–æ –≥–ª—è–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µüëá",
            reply_markup=builder.as_markup()
        )

@dp.callback_query(lambda c: c.data.startswith(('calendar_prev_', 'calendar_next_', 'calendar_today')))
async def process_calendar_navigation(callback_query: types.CallbackQuery):
    if callback_query.data.startswith('calendar_prev_'):
        _, _, year, month = callback_query.data.split('_')
        year, month = int(year), int(month)
    elif callback_query.data.startswith('calendar_next_'):
        _, _, year, month = callback_query.data.split('_')
        year, month = int(year), int(month)
    else:
        today = datetime.now()
        year, month = today.year, today.month

    await callback_query.message.edit_reply_markup(
        reply_markup=create_calendar(year=year, month=month)
    )
    await callback_query.answer()

async def show_records(date_str: str, records: list, message: types.Message, record_type: str):
    report = f"{'–ó–∞–∫—É–ø–∫–∏' if record_type == '–∑–∞–∫—É–ø–∫–∞' else '–ü—Ä–æ–¥–∞–∂–∏'} –∑–∞ {date_str}\n\n"
    total = 0
    
    for record in records:
        record_id, user_tag, time, amount = record[0], record[2], record[3], record[4]
        report += f"{record_id}. {user_tag}/{time}/{amount}\n"
        try:
            total += float(amount.replace('—Ä', '').replace(',', '').strip())
        except:
            pass
    
    report += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {int(total)}—Ä"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_records:{date_str}:{record_type}"),
        InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_records:{date_str}:{record_type}")
    )
    
    await message.answer(report, reply_markup=keyboard.as_markup())

@dp.callback_query(lambda c: c.data in ['sales', 'purchase', 'report'])
async def process_callback_button(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.update_data(action=callback_query.data)
    
    today = datetime.now().date()
    formatted_today = today.strftime('%d.%m.%y')

    if callback_query.data == 'sales':
        sales = get_sales_by_date(formatted_today, '–ø—Ä–æ–¥–∞–∂–∞')
        if sales:
            await show_records(formatted_today, sales, callback_query.message, '–ø—Ä–æ–¥–∞–∂–∞')
        else:
            await callback_query.message.answer("–°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö.")

    elif callback_query.data == 'purchase':
        purchases = get_sales_by_date(formatted_today, '–∑–∞–∫—É–ø–∫–∞')
        if purchases:
            await show_records(formatted_today, purchases, callback_query.message, '–∑–∞–∫—É–ø–∫–∞')
        else:
            await callback_query.message.answer("–°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫—É–ø–∫–∞—Ö.")

    elif callback_query.data == 'report':
        await generate_report(callback_query.message, formatted_today, state)

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=create_calendar()
    )

@dp.callback_query(lambda c: c.data.startswith('edit_records:'))
async def handle_edit_records(callback_query: types.CallbackQuery, state: FSMContext):
    _, date_str, record_type = callback_query.data.split(':')
    records = get_sales_by_date(date_str, record_type)
    
    keyboard = InlineKeyboardBuilder()
    for record in records:
        record_id, user_tag, time, amount = record[0], record[2], record[3], record[4]
        keyboard.row(InlineKeyboardButton(
            text=f"{record_id}. {user_tag}/{time}/{amount}",
            callback_data=f"select_record:{record_id}"
        ))
    
    keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_{record_type}"))
    
    await state.set_state(Form.waiting_for_record_selection)
    await state.update_data(record_type=record_type, date_str=date_str)
    
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard.as_markup()
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith('select_record:'))
async def handle_select_record(callback_query: types.CallbackQuery, state: FSMContext):
    record_id = int(callback_query.data.split(':')[1])
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úèÔ∏è –°—É–º–º—É", callback_data=f"edit_amount:{record_id}"),
        InlineKeyboardButton(text="‚úèÔ∏è –í—Ä–µ–º—è", callback_data=f"edit_time:{record_id}"),
        InlineKeyboardButton(text="‚úèÔ∏è Username", callback_data=f"edit_user_tag:{record_id}"),
    )
    keyboard.row(
        InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_delete:{record_id}"),
    )
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_edit")
    )
    
    await state.set_state(Form.waiting_for_edit_choice)
    await state.update_data(record_id=record_id)
    
    await callback_query.message.edit_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=keyboard.as_markup()
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith('confirm_delete:'))
async def handle_confirm_delete(callback_query: types.CallbackQuery, state: FSMContext):
    record_id = int(callback_query.data.split(':')[1])
    record = get_sale_by_id(record_id)
    
    if not record:
        await callback_query.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_record:{record_id}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    )
    
    await state.set_state(Form.waiting_for_delete_confirmation)
    await state.update_data(record_id=record_id)
    
    await callback_query.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?\n\n"
        f"ID: {record_id}\n"
        f"–¢–∏–ø: {record[1]}\n"
        f"–î–∞—Ç–∞: {record[5]}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {record[2]}\n"
        f"–í—Ä–µ–º—è: {record[3]}\n"
        f"–°—É–º–º–∞: {record[4]}",
        reply_markup=keyboard.as_markup()
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith('delete_record:'))
async def handle_delete_record(callback_query: types.CallbackQuery, state: FSMContext):
    record_id = int(callback_query.data.split(':')[1])
    record = get_sale_by_id(record_id)
    
    if record:
        delete_sale(record_id)
        await callback_query.message.edit_text(f"–ó–∞–ø–∏—Å—å {record_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
    else:
        await callback_query.message.edit_text("–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    await state.clear()
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == 'cancel_delete')
async def handle_cancel_delete(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    record_id = data.get('record_id')
    
    if record_id:
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="‚úèÔ∏è –°—É–º–º—É", callback_data=f"edit_amount:{record_id}"),
            InlineKeyboardButton(text="‚úèÔ∏è –í—Ä–µ–º—è", callback_data=f"edit_time:{record_id}"),
            InlineKeyboardButton(text="‚úèÔ∏è Username", callback_data=f"edit_user_tag:{record_id}"),
        )
        keyboard.row(
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_delete:{record_id}"),
        )
        keyboard.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_edit")
        )
        
        await callback_query.message.edit_text(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=keyboard.as_markup()
        )
    
    await state.set_state(Form.waiting_for_edit_choice)
    await callback_query.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@dp.callback_query(lambda c: c.data.startswith('edit_user_tag:'))
async def handle_edit_user_tag_choice(callback_query: types.CallbackQuery, state: FSMContext):
    _, record_id = callback_query.data.split(':')
    record_id = int(record_id)
    
    await state.set_state(Form.waiting_for_edit_user_tag)
    await state.update_data(record_id=record_id)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π username (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @):")
    await callback_query.answer()

@dp.message(Form.waiting_for_edit_user_tag)
async def process_new_user_tag(message: types.Message, state: FSMContext):
    data = await state.get_data()
    record_id = data['record_id']
    
    if message.text.startswith('@') and len(message.text) > 1:
        update_sale(record_id, user_tag=message.text)
        await message.answer("Username —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        await state.clear()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
@dp.callback_query(lambda c: c.data.startswith(('edit_amount:', 'edit_time:')))
async def handle_edit_choice(callback_query: types.CallbackQuery, state: FSMContext):
    action, record_id = callback_query.data.split(':')
    record_id = int(record_id)
    
    if action == 'edit_amount':
        await state.set_state(Form.waiting_for_edit_amount)
        await state.update_data(record_id=record_id)
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:")
    elif action == 'edit_time':
        await state.set_state(Form.waiting_for_edit_time)
        await state.update_data(record_id=record_id)
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú):")
    
    await callback_query.answer()

@dp.message(Form.waiting_for_edit_amount)
async def process_new_amount(message: types.Message, state: FSMContext):
    data = await state.get_data()
    record_id = data['record_id']
    
    try:
        new_amount = message.text.replace('—Ä', '').replace(',', '').strip()
        float(new_amount)
        update_sale(record_id, amount=new_amount)
        await message.answer("–°—É–º–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message(Form.waiting_for_edit_time)
async def process_new_time(message: types.Message, state: FSMContext):
    data = await state.get_data()
    record_id = data['record_id']
    
    if re.match(r'^\d{2}:\d{2}$', message.text):
        update_sale(record_id, time=message.text)
        await message.answer("–í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        await state.clear()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")

async def generate_report(message: types.Message, date_str: str, state: FSMContext):
    sales = get_sales_by_date(date_str, '–ø—Ä–æ–¥–∞–∂–∞')
    purchases = get_sales_by_date(date_str, '–∑–∞–∫—É–ø–∫–∞')

    total_sales = sum([float(s[4].replace('—Ä', '').replace(',', '').strip()) for s in sales if s[4]]) if sales else 0
    total_purchases = sum([float(p[4].replace('—Ä', '').replace(',', '').strip()) for p in purchases if p[4]]) if purchases else 0

    admin_percent = round(total_sales * 0.15)
    card_fee = 100
    day_total = int(total_sales - total_purchases - admin_percent - card_fee)

    report = (
        f"<b>–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∑–∞ {date_str}–≥</b>\n"
        f"1. –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ : {int(total_sales)}—Ä\n"
        f"2. –ü–æ–∫—É–ø–∫–∞ —Ä–µ–∫–ª–∞–º—ã : {int(total_purchases)}—Ä\n"
        f"3. –ü—Ä–æ—Ü–µ–Ω—Ç –∞–¥–º–∏–Ω–∞ : {admin_percent}—Ä\n"
        f"4. –ö–æ–Ω—Ç–µ–Ω—â–∏–∫ : - \n"
        f"5. –ö–∞—Ä—Ç–∞ : - {card_fee}—Ä\n\n"
        f"<b>–ò–¢–û–ì –î–ù–Ø : {day_total}—Ä</b>"
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–∞–∂–∏", callback_data="edit_report_sales"),
        InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–∫—É–ø–∫–∏", callback_data="edit_report_purchases")
    )
    keyboard.row(
        InlineKeyboardButton(text="‚úèÔ∏è % –ê–¥–º–∏–Ω–∞", callback_data="edit_report_admin"),
        InlineKeyboardButton(text="‚úèÔ∏è –ö–∞—Ä—Ç–∞", callback_data="edit_report_card")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="update_report"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )

    await state.update_data(
        current_sales=total_sales,
        current_purchases=total_purchases,
        current_admin=admin_percent,
        current_card=card_fee,
        report_date=date_str
    )

    await message.answer(report, reply_markup=keyboard.as_markup())

@dp.callback_query(lambda c: c.data.startswith('calendar_day_'))
async def process_calendar(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        date_str = callback_query.data.split('_')[2]
        selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        formatted_date = selected_date.strftime('%d.%m.%y')
        
        data = await state.get_data()
        action = data.get('action')
        
        if action == 'sales':
            sales = get_sales_by_date(formatted_date, '–ø—Ä–æ–¥–∞–∂–∞')
            if sales:
                await show_records(formatted_date, sales, callback_query.message, '–ø—Ä–æ–¥–∞–∂–∞')
            else:
                await callback_query.message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ {formatted_date}")

        elif action == 'purchase':
            purchases = get_sales_by_date(formatted_date, '–∑–∞–∫—É–ø–∫–∞')
            if purchases:
                await show_records(formatted_date, purchases, callback_query.message, '–∑–∞–∫—É–ø–∫–∞')
            else:
                await callback_query.message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫—É–ø–∫–∞—Ö –∑–∞ {formatted_date}")

        elif action == 'report':
            await generate_report(callback_query.message, formatted_date, state)

        try:
            await callback_query.message.edit_reply_markup(
                reply_markup=create_calendar(
                    year=selected_date.year,
                    month=selected_date.month,
                    selected_date=selected_date
                )
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å: {e}")
        
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

@dp.callback_query(lambda c: c.data == 'cancel_edit')
async def handle_cancel_edit(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.delete()
    await callback_query.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@dp.callback_query(lambda c: c.data.startswith('back_to_'))
async def handle_back_to_records(callback_query: types.CallbackQuery, state: FSMContext):
    record_type = callback_query.data.split('_')[-1]
    today = datetime.now().date()
    formatted_today = today.strftime('%d.%m.%y')
    
    if record_type == 'sales':
        sales = get_sales_by_date(formatted_today, '–ø—Ä–æ–¥–∞–∂–∞')
        if sales:
            await show_records(formatted_today, sales, callback_query.message, '–ø—Ä–æ–¥–∞–∂–∞')
        else:
            await callback_query.message.answer("–°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö.")
    elif record_type == 'purchase':
        purchases = get_sales_by_date(formatted_today, '–∑–∞–∫—É–ø–∫–∞')
        if purchases:
            await show_records(formatted_today, purchases, callback_query.message, '–∑–∞–∫—É–ø–∫–∞')
        else:
            await callback_query.message.answer("–°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫—É–ø–∫–∞—Ö.")
    
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith('edit_report_'))
async def handle_edit_report(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data.split('_')[-1]
    
    if action == 'sales':
        await state.set_state(Form.waiting_for_edit_sales)
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂:")
    elif action == 'purchases':
        await state.set_state(Form.waiting_for_edit_purchases)
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∑–∞–∫—É–ø–æ–∫:")
    elif action == 'admin':
        await state.set_state(Form.waiting_for_edit_admin)
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∞–¥–º–∏–Ω–∞:")
    elif action == 'card':
        await state.set_state(Form.waiting_for_edit_card)
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é –∫–∞—Ä—Ç—ã:")
    
    await callback_query.answer()

@dp.message(Form.waiting_for_edit_sales)
async def process_new_sales(message: types.Message, state: FSMContext):
    try:
        new_sales = float(message.text.replace('—Ä', '').replace(',', '').strip())
        await state.update_data(current_sales=new_sales)
        await message.answer(f"–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {int(new_sales)}—Ä")
        await show_updated_report(message, state)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message(Form.waiting_for_edit_purchases)
async def process_new_purchases(message: types.Message, state: FSMContext):
    try:
        new_purchases = float(message.text.replace('—Ä', '').replace(',', '').strip())
        await state.update_data(current_purchases=new_purchases)
        await message.answer(f"–°—É–º–º–∞ –∑–∞–∫—É–ø–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {int(new_purchases)}—Ä")
        await show_updated_report(message, state)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message(Form.waiting_for_edit_admin)
async def process_new_admin(message: types.Message, state: FSMContext):
    try:
        new_admin = float(message.text.replace('—Ä', '').replace(',', '').strip())
        await state.update_data(current_admin=new_admin)
        await message.answer(f"–ü—Ä–æ—Ü–µ–Ω—Ç –∞–¥–º–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {int(new_admin)}—Ä")
        await show_updated_report(message, state)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message(Form.waiting_for_edit_card)
async def process_new_card(message: types.Message, state: FSMContext):
    try:
        new_card = float(message.text.replace('—Ä', '').replace(',', '').strip())
        await state.update_data(current_card=new_card)
        await message.answer(f"–ö–æ–º–∏—Å—Å–∏—è –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {int(new_card)}—Ä")
        await show_updated_report(message, state)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def show_updated_report(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    total_sales = data.get('current_sales', 0)
    total_purchases = data.get('current_purchases', 0)
    admin_percent = data.get('current_admin', round(total_sales * 0.15))
    card_fee = data.get('current_card', 100)
    date_str = data.get('report_date', datetime.now().strftime('%d.%m.%y'))
    day_total = int(total_sales - total_purchases - admin_percent - card_fee)

    report = (
        f"<b>–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∑–∞ {date_str}–≥</b>\n"
        f"1. –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ : {int(total_sales)}—Ä\n"
        f"2. –ü–æ–∫—É–ø–∫–∞ —Ä–µ–∫–ª–∞–º—ã : {int(total_purchases)}—Ä\n"
        f"3. –ü—Ä–æ—Ü–µ–Ω—Ç –∞–¥–º–∏–Ω–∞ : {admin_percent}—Ä\n"
        f"4. –ö–æ–Ω—Ç–µ–Ω—â–∏–∫ : - \n"
        f"5. –ö–∞—Ä—Ç–∞ : - {card_fee}—Ä\n\n"
        f"<b>–ò–¢–û–ì –î–ù–Ø : {day_total}—Ä</b>"
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–∞–∂–∏", callback_data="edit_report_sales"),
        InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–∫—É–ø–∫–∏", callback_data="edit_report_purchases")
    )
    keyboard.row(
        InlineKeyboardButton(text="‚úèÔ∏è % –ê–¥–º–∏–Ω–∞", callback_data="edit_report_admin"),
        InlineKeyboardButton(text="‚úèÔ∏è –ö–∞—Ä—Ç–∞", callback_data="edit_report_card")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="update_report"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )

    await message.answer(report, reply_markup=keyboard.as_markup())

@dp.callback_query(lambda c: c.data == 'update_report')
async def handle_update_report(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    date_str = data.get('report_date', datetime.now().strftime('%d.%m.%y'))
    await generate_report(callback_query.message, date_str, state)
    await callback_query.answer("–û—Ç—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")

@dp.callback_query(lambda c: c.data == 'reload')
async def reload_handler(callback_query: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∞", callback_data="sales"),
        InlineKeyboardButton(text="–ó–∞–∫—É–ø–∫–∞", callback_data="purchase")
    )
    builder.row(InlineKeyboardButton(text="–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å", callback_data="report"))
    
    try:
        await callback_query.message.delete()
        await callback_query.message.answer(
            "–í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ –º–æ–∂–Ω–æ –≥–ª—è–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µüëá",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

@dp.callback_query(lambda c: c.data == 'back_to_menu')
async def back_to_menu_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∞", callback_data="sales"),
            InlineKeyboardButton(text="–ó–∞–∫—É–ø–∫–∞", callback_data="purchase")
        )
        builder.row(InlineKeyboardButton(text="–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å", callback_data="report"))
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            await callback_query.message.edit_text(
                "–í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ –º–æ–∂–Ω–æ –≥–ª—è–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µüëá",
                reply_markup=builder.as_markup()
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.answer(
                "–í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ –º–æ–∂–Ω–æ –≥–ª—è–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µüëá",
                reply_markup=builder.as_markup()
            )
        
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_menu_handler: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

@dp.callback_query(lambda c: c.data.startswith('delete_records:'))
async def handle_delete_records(callback_query: types.CallbackQuery, state: FSMContext):
    _, date_str, record_type = callback_query.data.split(':')
    records = get_sales_by_date(date_str, record_type)
    
    keyboard = InlineKeyboardBuilder()
    for record in records:
        record_id, user_tag, time, amount = record[0], record[2], record[3], record[4]
        keyboard.row(InlineKeyboardButton(
            text=f"{record_id}. {user_tag}/{time}/{amount}",
            callback_data=f"select_delete:{record_id}"
        ))
    
    keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_{record_type}"))
    
    await state.set_state(Form.waiting_for_record_selection)
    await state.update_data(record_type=record_type, date_str=date_str)
    
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard.as_markup()
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith('select_delete:'))
async def handle_select_delete(callback_query: types.CallbackQuery, state: FSMContext):
    record_id = int(callback_query.data.split(':')[1])
    record = get_sale_by_id(record_id)
    
    if not record:
        await callback_query.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_record:{record_id}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    )
    
    await state.set_state(Form.waiting_for_delete_confirmation)
    await state.update_data(record_id=record_id)
    
    await callback_query.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?\n\n"
        f"ID: {record_id}\n"
        f"–¢–∏–ø: {record[1]}\n"
        f"–î–∞—Ç–∞: {record[5]}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {record[2]}\n"
        f"–í—Ä–µ–º—è: {record[3]}\n"
        f"–°—É–º–º–∞: {record[4]}",
        reply_markup=keyboard.as_markup()
    )
    await callback_query.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    init_db()
    asyncio.run(main())