import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile, InlineQueryResultArticle, InputTextMessageContent
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from datetime import datetime, timedelta
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import init_db, add_sale
import re
from config import BOT_TOKEN
from database import get_sales_by_date  

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_date = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–∞–ª–µ–Ω–¥–∞—Ä—è
def create_calendar(year=None, month=None):
    if year is None or month is None:
        today = datetime.now()
        year, month = today.year, today.month
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardBuilder()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    month_name = datetime(year, month, 1).strftime('%B %Y')
    keyboard.row(InlineKeyboardButton(text=month_name, callback_data="ignore"))
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    buttons = []
    for day in week_days:
        buttons.append(InlineKeyboardButton(text=day, callback_data="ignore"))
    keyboard.row(*buttons)
    
    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    first_day = datetime(year, month, 1)
    last_day = datetime(year, month + 1, 1) - timedelta(days=1) if month < 12 else datetime(year + 1, 1, 1) - timedelta(days=1)
    
    # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for _ in range((first_day.weekday() + 1) % 7):
        buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
    
    # –ö–Ω–æ–ø–∫–∏ —Å –¥–Ω—è–º–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for day in range(1, last_day.day + 1):
        date_str = f"{year}-{month:02d}-{day:02d}"
        buttons.append(InlineKeyboardButton(text=str(day), callback_data=f"calendar_day_{date_str}"))
    
    # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
    while len(buttons) % 7 != 0:
        buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ 7 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 7):
        keyboard.row(*buttons[i:i+7])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1
    
    keyboard.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"calendar_prev_{prev_year}_{prev_month}"),
        InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="calendar_today"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"calendar_next_{next_year}_{next_month}")
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
    keyboard.row(
        InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    )
    
    return keyboard.as_markup()

@dp.inline_query()
async def handle_inline_sales(query: types.InlineQuery):
    # –ü—Ä–∏–º–µ—Ä: #–ø—Ä–æ–¥–∞–∂–∞/10.04.25/@Verona/10:00/7000—Ä
    pattern = r"#(\w+)/(\d{2}\.\d{2}\.\d{2})/(@\w+)/(\d{2}:\d{2})/([\d.,]+—Ä?)"
    match = re.search(pattern, query.query)
    
    if not match:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º answer –¥–ª—è inline-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤–º–µ—Å—Ç–æ reply
        await query.answer(
            results=[],
            switch_pm_text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: #–ø—Ä–æ–¥–∞–∂–∞/10.04.25/@username/10:00/7000—Ä",
            switch_pm_parameter="help"
        )
        return

    sale_type, date, user_tag, time, amount = match.groups()

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_sale(
        sale_type=sale_type,
        date=date,
        user_tag=user_tag,
        time=time,
        amount=amount,
        user_id=query.from_user.id
    )

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è inline-–∑–∞–ø—Ä–æ—Å–∞
    result = types.InlineQueryResultArticle(
        id="1",
        title=f"–ü—Ä–æ–¥–∞–∂–∞: {amount}",
        input_message_content=types.InputTextMessageContent(
            message_text=(
                f"<b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b>\n"
                f"–¢–∏–ø: {sale_type}\n"
                f"–î–∞—Ç–∞: {date}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_tag}\n"
                f"–í—Ä–µ–º—è: {time}\n"
                f"–°—É–º–º–∞: {amount}\n"
                f"–î–æ–±–∞–≤–∏–ª: {query.from_user.full_name}"
            ),
            parse_mode=ParseMode.HTML
        ),
        description=f"{sale_type} {date} {user_tag} {time}"
    )

    await query.answer(
        results=[result],
        cache_time=0
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –Ω—É–∂–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–∞–∂–∞" –∏ "–ó–∞–∫—É–ø–∫–∞" –≤ –æ–¥–∏–Ω —Ä—è–¥
    builder.row(
        InlineKeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∞", callback_data="sales"),
        InlineKeyboardButton(text="–ó–∞–∫—É–ø–∫–∞", callback_data="purchase")
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å" –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
    builder.row(
        InlineKeyboardButton(text="–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å", callback_data="report")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        photo = InputFile("hello_photo.jpg")
        await message.reply_photo(
            photo=photo,
            caption="–í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ –º–æ–∂–Ω–æ –≥–ª—è–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µüëá",
            reply_markup=builder.as_markup()
        )
    except FileNotFoundError:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç\n\n"
            "–í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ –º–æ–∂–Ω–æ –≥–ª—è–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µüëá",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç\n\n"
            "–í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ –º–æ–∂–Ω–æ –≥–ª—è–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µüëá",
            reply_markup=builder.as_markup()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (–≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è)
@dp.callback_query(lambda c: c.data in ['sales', 'purchase', 'report'])
async def process_callback_button(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(action=callback_query.data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    await callback_query.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {callback_query.data}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=create_calendar()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
@dp.callback_query(lambda c: c.data == 'back_to_menu')
async def back_to_menu_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –Ω—É–∂–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–∞–∂–∞" –∏ "–ó–∞–∫—É–ø–∫–∞" –≤ –æ–¥–∏–Ω —Ä—è–¥
    builder.row(
        InlineKeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∞", callback_data="sales"),
        InlineKeyboardButton(text="–ó–∞–∫—É–ø–∫–∞", callback_data="purchase")
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å" –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
    builder.row(
        InlineKeyboardButton(text="–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å", callback_data="report")
    )
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞—è –º–µ–Ω—é
    await callback_query.message.edit_text(
        "–í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ –º–æ–∂–Ω–æ –≥–ª—è–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µüëá",
        reply_markup=builder.as_markup()
    )
    await callback_query.answer()
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
@dp.callback_query(lambda c: c.data.startswith('calendar_day_'))
async def process_calendar(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    
    if data.startswith('calendar_day_'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É
        date_str = data.split('_')[2]
        selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        formatted_date = selected_date.strftime('%d.%m.%y')  # –§–æ—Ä–º–∞—Ç 10.04.25
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        state_data = await state.get_data()
        action = state_data.get('action')
        
        if action == 'sales':
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            sales = get_sales_by_date(formatted_date, '–ø—Ä–æ–¥–∞–∂–∞')
            
            if not sales:
                await callback_query.message.answer(
                    f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ {formatted_date}"
                )
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                report = f"–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ {formatted_date}\n\n"
                total = 0
                
                for sale in sales:
                    user_tag = sale[2]  # user_tag
                    time = sale[3]     # time
                    amount = sale[4]    # amount
                    report += f"{user_tag}/{time}/{amount}\n"
                    
                    # –°—É–º–º–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏
                    try:
                        amount_num = float(amount.replace('—Ä', '').replace(',', '').strip())
                        total += amount_num
                    except:
                        pass
                
                report += f"\n–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {int(total)}—Ä"
                
                await callback_query.message.answer(report)
        
        elif action == 'purchase':
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–∫—É–ø–æ–∫
            pass
        
        elif action == 'report':
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
            pass
        
        await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    init_db()
    asyncio.run(main())